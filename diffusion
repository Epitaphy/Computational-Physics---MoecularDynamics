
import numpy as np
import matplotlib.pyplot as plt
from scipy.constants import g as GRAV, k as KB

# define constants and variables
EPSILON = 1.651e-21             # energy scale in new unit system
MASS = 6.644e-26                # mass scale in new unit system
SIGMA = 3.405e-10               # length scale in new unit system
TAU = 4.756e-18                 # time scale in new unit system
numParticles = 100
TEMP = 288.15
VAR = np.sqrt(KB*TEMP/EPSILON)  # standard deviation of speeds according to ideal gas theory



# import dataset generated by dynamics.py
new_speed = np.zeros((200,100,2))
for i in range(4000):
    if i%20==0:
        speed = np.load("./checkpoints/EDLv1_%i.npy" %i)
        new_speed[int(i/20)] = speed

v0 = new_speed[0]
dArray = []
dt = 1

print(v0.shape)

# returns the sum over all scalar products for Green-Kuno
def sum(n):
    return float(np.tensordot(new_speed[n],v0))

# integrates the first n steps from t0 on according to Green-Kubo relation
# also converts back from [EPSILON, SIGMA, TAU] = [1,1,1] to [joule, meter, second]
def integrate(n):
    s = 1/2*(sum(0)+sum(n))
    for i in range(1,n-1):
        s += sum(i)
    return s*dt / (2*100) * (SIGMA**2/TAU)


# append D at the nth step to array for plot, individual entries should somewhat converge while getting bigger according to Green-Kubo
for i in range(2,len(new_speed)):
    dArray.append(integrate(i))
print(dArray)



# plot arrhenius-relation
d0 = 1
def arrh(T):
    return np.log(d0*np.exp(-10*T))
